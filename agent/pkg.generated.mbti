// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/agent"

import(
  "moonbitlang/maria/model"
  "moonbitlang/maria/openai"
  "moonbitlang/maria/tool"
)

// Values
async fn new(@model.Model, cwd~ : String) -> Agent

// Errors

// Types and methods
type Agent
fn Agent::add_listener(Self, Event, async (EventContext) -> Unit) -> Unit
fn Agent::add_message(Self, @openai.ChatCompletionMessageParam) -> Unit
fn Agent::add_tool(Self, @tool.Tool) -> Unit
fn Agent::close(Self) -> Unit
async fn Agent::start(Self) -> Unit

pub(all) enum Event {
  ConversationStart
  ConversationEnd
  PreToolCall
  PostToolCall
  TokenCounted
  RequestCompleted
}
impl Eq for Event
impl Hash for Event

pub struct EventContext {
  usage : @openai.CompletionUsage?
  message : @openai.ChatCompletionMessage?
  origin_token_count : Int?
  pruned_token_count : Int?
  tool_call : @openai.ChatCompletionMessageToolCall?
  tool_call_result : @tool.Result?
}

// Type aliases

// Traits

