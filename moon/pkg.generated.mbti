// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/moon"

// Values
async fn check(package_? : Package, patch_file? : StringView, target_dir? : StringView, cwd? : StringView) -> Array[Diagnostic]

async fn new(user? : String, name? : String, StringView, cwd? : StringView) -> Unit

// Errors

// Types and methods
pub struct Diagnostic {
  error_code : Int
  level : Level
  loc : Loc
  message : String
}
impl Show for Diagnostic
impl ToJson for Diagnostic

type File
fn File::header(Self) -> Segment
fn File::lines(Self) -> Array[StringView]
fn File::path(Self) -> String
fn File::segment(Self, Int) -> Segment
fn File::segments(Self) -> ArrayView[Segment]
impl ToJson for File

pub enum Level {
  Error
  Warning
}
impl Show for Level
impl ToJson for Level

pub struct Loc {
  end : Pos
  path : String
  start : Pos
}
impl Show for Loc
impl ToJson for Loc

type Module
async fn Module::check(Self, patch_file? : StringView, target_dir? : StringView) -> Unit
async fn Module::check_patch(Self, Segment, String) -> Array[Diagnostic]
async fn Module::files(Self) -> Iter[File]
async fn Module::load(String) -> Self
fn Module::name(Self) -> String
fn Module::source(Self) -> String

type Package
fn Package::add_diagnostic(Self, Diagnostic) -> Unit
async fn Package::check(Self, patch_file? : StringView, target_dir? : StringView, cwd? : StringView) -> Array[Diagnostic]
fn Package::name(Self) -> String
fn Package::path(Self) -> String

pub struct Pos {
  col : Int
  line : Int
}
impl Show for Pos
impl ToJson for Pos

type Segment
fn Segment::content(Self) -> String
fn Segment::diagnostics(Self) -> Array[Diagnostic]
fn Segment::index(Self) -> Int
fn Segment::lines(Self) -> ArrayView[StringView]
async fn Segment::replace(Self, String) -> Unit
impl ToJson for Segment

// Type aliases

// Traits

