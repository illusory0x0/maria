// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/openai"

import(
  "moonbitlang/core/json"
)

// Values
fn[T : ToChatCompletionMessageParamContent] assistant_message(content? : T, tool_calls? : Array[ChatCompletionMessageToolCall], name? : String) -> ChatCompletionMessageParam

fn[T : ToChatCompletionMessageParamContent] system_message(content~ : T, name? : String) -> ChatCompletionMessageParam

fn text_content_part(String, cache_control? : CacheControl) -> ChatCompletionContentPartParam

fn tool(name~ : String, description~ : String, parameters~ : Map[String, Json], strict? : Bool) -> ChatCompletionToolParam

fn[T : ToChatCompletionMessageParamContent] tool_message(content~ : T, tool_call_id~ : String) -> ChatCompletionMessageParam

fn[T : ToChatCompletionMessageParamContent] user_message(content~ : T, name? : String) -> ChatCompletionMessageParam

// Errors

// Types and methods
pub(all) enum CacheControl {
  Ephemeral
}
impl ToJson for CacheControl

pub struct ChatCompletion {
  id : String
  choices : Array[ChatCompletionChoice]
  created : Int
  model : String
  usage : CompletionUsage?
  system_fingerprint : String?
  service_tier : ChatCompletionServiceTier?
}
impl Show for ChatCompletion
impl @json.FromJson for ChatCompletion

pub struct ChatCompletionAssistantMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
  tool_calls : Array[ChatCompletionMessageToolCall]
  function_call : ChatCompletionMessageFunctionCall?
}

pub struct ChatCompletionChoice {
  finish_reason : ChatCompletionChoiceFinishReason
  index : Int
  message : ChatCompletionMessage
  logprobs : ChatCompletionChoiceLogprobs?
}
impl Show for ChatCompletionChoice

pub enum ChatCompletionChoiceFinishReason {
  Stop
  Length
  ToolCalls
  ContentFilter
  FunctionCall
}
impl Show for ChatCompletionChoiceFinishReason

pub struct ChatCompletionChoiceLogprobs {
  content : Array[ChatCompletionTokenLogprob]?
  refusal : Array[ChatCompletionTokenLogprob]?
}
impl Show for ChatCompletionChoiceLogprobs

pub struct ChatCompletionChunk {
  id : String
  choices : Array[ChatCompletionChunkChoice]
  created : Int
  model : String
  usage : CompletionUsage?
  system_fingerprint : String?
  service_tier : ChatCompletionServiceTier?
}
impl @json.FromJson for ChatCompletionChunk

pub struct ChatCompletionChunkChoice {
  index : Int
  delta : ChatCompletionChunkChoiceDelta
  finish_reason : ChatCompletionChoiceFinishReason?
}

pub struct ChatCompletionChunkChoiceDelta {
  content : String?
  role : ChatCompletionRole?
  tool_calls : Array[ChatCompletionChunkChoiceDeltaToolCall]?
}

pub struct ChatCompletionChunkChoiceDeltaToolCall {
  index : Int
  id : String?
  function : ChatCompletionChunkChoiceDeltaToolCallFunction
}

pub struct ChatCompletionChunkChoiceDeltaToolCallFunction {
  arguments : String?
  name : String?
}

pub enum ChatCompletionContentPartParam {
  Text(ChatCompletionContentPartTextParam)
}
impl ToJson for ChatCompletionContentPartParam

pub(all) struct ChatCompletionContentPartTextParam {
  text : String
  cache_control : CacheControl?
}
impl ToJson for ChatCompletionContentPartTextParam

pub struct ChatCompletionMessage {
  content : String?
  refusal : String?
  tool_calls : Array[ChatCompletionMessageToolCall]
  function_call : ChatCompletionMessageFunctionCall?
}
fn ChatCompletionMessage::to_param(Self) -> ChatCompletionMessageParam
impl Show for ChatCompletionMessage

pub struct ChatCompletionMessageFunctionCall {
  arguments : String
  name : String
}
impl Show for ChatCompletionMessageFunctionCall

pub enum ChatCompletionMessageParam {
  System(ChatCompletionSystemMessageParam)
  User(ChatCompletionUserMessageParam)
  Assistant(ChatCompletionAssistantMessageParam)
  Tool(ChatCompletionToolMessageParam)
}
impl ToJson for ChatCompletionMessageParam

pub struct ChatCompletionMessageToolCall {
  id : String
  function : Function
}
impl Show for ChatCompletionMessageToolCall

pub enum ChatCompletionRole {
  Developer
  System
  User
  Assistant
  Tool
}

pub enum ChatCompletionServiceTier {
  Auto
  Default
  Flex
  Scale
  Priority
}
impl Show for ChatCompletionServiceTier

pub struct ChatCompletionSystemMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
}

pub struct ChatCompletionTokenLogprob {
  token : String
  logprob : Double
  bytes : Array[Int]?
  top_logprobs : Array[ChatCompletionTopLogprob]
}
impl Show for ChatCompletionTokenLogprob

pub struct ChatCompletionToolMessageParam {
  content : Array[ChatCompletionContentPartParam]
  tool_call_id : String
}

type ChatCompletionToolParam
impl ToJson for ChatCompletionToolParam

pub struct ChatCompletionTopLogprob {
  token : String
  logprob : Double
  bytes : Array[Int]?
}
impl Show for ChatCompletionTopLogprob

pub struct ChatCompletionUserMessageParam {
  content : Array[ChatCompletionContentPartParam]
  name : String?
}

pub struct CompletionUsage {
  completion_tokens : Int
  prompt_tokens : Int
  total_tokens : Int
}
impl Show for CompletionUsage

pub struct Function {
  arguments : String
  name : String
}
impl Show for Function

// Type aliases

// Traits
trait ToChatCompletionMessageParamContent
impl ToChatCompletionMessageParamContent for String
impl ToChatCompletionMessageParamContent for Array[ChatCompletionContentPartParam]

