// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/todo"

import(
  "moonbitlang/core/json"
)

// Values
fn list(cwd~ : StringView) -> List raise

// Errors

// Types and methods
type Index

pub(all) struct Item {
  content : String
  created_at : String
  id : String
  notes : String?
  priority : Priority
  status : Status
  updated_at : String
}
fn Item::update(Self, content? : String, notes? : String?, status? : Status, priority? : Priority) -> Self raise
impl ToJson for Item
impl @json.FromJson for Item

type List
fn List::add_task(Self, String, status? : Status, priority? : Priority, notes? : String?) -> Item raise
fn List::find(Self, String) -> Index?
fn List::get(Self, Index) -> Item
async fn List::load(Self) -> Unit
fn List::parse(Self, String, priority~ : Priority, notes? : String) -> Unit raise
async fn List::save(Self) -> Unit
fn List::todos(Self) -> Array[Item]
fn List::update_task(Self, Index, Item) -> Unit raise

pub(all) enum Priority {
  High
  Medium
  Low
}
impl ToJson for Priority

pub(all) enum Status {
  Pending
  InProgress
  Completed
}
impl ToJson for Status

// Type aliases

// Traits

