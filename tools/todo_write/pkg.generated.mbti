// Generated using `moon info`, DON'T EDIT IT
package "moonbitlang/maria/tools/todo_write"

import(
  "moonbitlang/core/json"
  "moonbitlang/maria/todo"
  "moonbitlang/maria/tool"
)

// Values
const Prompt : String = "# todo_write\n\n## Purpose\n\n- Create and manage structured task lists for complex coding sessions\n- Track progress on multi-step operations with status updates\n- Organize work into manageable, prioritized tasks\n- Provide clear progress visibility to users\n\n## When to Use\n\nUse this tool proactively in these scenarios, but ONLY AFTER thorough project exploration:\n\n- **FIRST EXPLORE THE PROJECT**: Always start with project exploration using\n  search_files, execute_command, and AC module searches\n- **Complex multi-step tasks**: When a task requires 3 or more distinct steps or\n  actions\n- **Non-trivial and complex tasks**: Tasks that require careful planning or\n  multiple operations\n- **User explicitly requests todo list**: When the user directly asks you to use\n  the todo list\n- **User provides multiple tasks**: When users provide a list of things to be\n  done (numbered or comma-separated)\n- **After receiving new instructions**: Immediately capture user requirements as\n  todos, but explore the codebase first\n- **When you start working on a task**: Mark it as in_progress BEFORE beginning\n  work (ideally only one task should be in_progress at a time)\n- **After completing a task**: Mark it as completed and add any new follow-up\n  tasks discovered during implementation\n\n## When NOT to Use\n\nSkip using this tool when:\n\n- There is only a **single, straightforward task**\n- The task is **trivial** and tracking it provides no organizational benefit\n- The task can be completed in **less than 3 trivial steps**\n- The task is **purely conversational or informational**\n\n**NOTE**: Do not use this tool if there is only one trivial task to do. In this\ncase you are better off just doing the task directly.\n\n## Important Considerations\n\n- Each task gets a unique ID that can be used for future updates\n- Task content for 'create' action should be formatted as a numbered list for multiple tasks\n- The system automatically tracks task creation and modification timestamps\n- Todo lists persist across tool calls within the same session\n- Use descriptive task names that clearly indicate what needs to be accomplished\n\n## Example Usage Scenario\n\n```\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\n\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n\nCreates todo list with the following items:\n1. Create dark mode toggle component in Settings page\n2. Add dark mode state management (context/store)\n3. Implement CSS-in-JS styles for dark theme\n4. Update existing components to support theme switching\n5. Run tests and build process, addressing any failures or errors that occur\n\nThinking: The assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n```\n\n## Workflow Tips\n\n1. **Start with creation**: Use 'create' action to establish the initial task list for complex projects\n2. **Add tasks incrementally**: Use 'add_task' as new requirements emerge during implementation\n3. **Track progress actively**: Use 'mark_progress' when starting work on a task\n4. **Complete tasks promptly**: Use 'mark_completed' when tasks are finished\n5. **Add context**: Use 'notes' parameter to record important decisions or challenges\n6. **Review regularly**: Use todo_read to maintain awareness of overall progress\n\nBy using these TODO tools effectively, you can maintain better organization, provide clear progress visibility, and demonstrate a systematic approach to complex coding tasks.\n\nIMPORTANT: BEFORE USING TODO TOOLS, ALWAYS CONDUCT THOROUGH PROJECT EXPLORATION FIRST!\n\nBegin every task by systematically exploring the project:\n\n1. Use search_files to understand the project structure and locate relevant files\n2. Use execute_command with grep patterns to find specific code patterns and implementations\n3. Search for existing AC modules that might provide functionality you can reuse\n\nOnly after gathering sufficient information about the project structure, existing patterns, and available modules should you proceed to planning tasks with TODO tools.\n\nThe TODO tools help you manage and track task progress during complex coding sessions. They provide structured task management capabilities that enhance productivity and demonstrate thoroughness to users.\n"

let todo_write : @tool.Tool[@todo.List]

// Errors

// Types and methods
pub(all) struct TodoWriteResult {
  todos : Array[@todo.Item]
  message : String
  updated_todos : Array[@todo.Item]
  is_new_creation : Bool
}
fn TodoWriteResult::from_json(Json, @json.JsonPath) -> Self raise @json.JsonDecodeError // from trait `@json.FromJson`
fn TodoWriteResult::to_json(Self) -> Json // from trait `ToJson`
impl ToJson for TodoWriteResult
impl @json.FromJson for TodoWriteResult

// Type aliases

// Traits

